{"remainingRequest":"E:\\Github\\code\\TRMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Github\\code\\TRMS\\src\\views\\Console\\module\\resc.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Github\\code\\TRMS\\src\\views\\Console\\module\\resc.vue","mtime":1584618719686},{"path":"E:\\Github\\code\\TRMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Github\\code\\TRMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Github\\code\\TRMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}