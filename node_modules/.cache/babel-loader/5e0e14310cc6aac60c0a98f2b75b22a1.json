{"remainingRequest":"E:\\Github\\code\\TRMS\\node_modules\\thread-loader\\dist\\cjs.js!E:\\Github\\code\\TRMS\\node_modules\\babel-loader\\lib\\index.js!E:\\Github\\code\\TRMS\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Github\\code\\TRMS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Github\\code\\TRMS\\src\\views\\User\\module\\resc.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Github\\code\\TRMS\\src\\views\\User\\module\\resc.vue","mtime":1585155776059},{"path":"E:\\Github\\code\\TRMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Github\\code\\TRMS\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Github\\code\\TRMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Github\\code\\TRMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Github\\code\\TRMS\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}